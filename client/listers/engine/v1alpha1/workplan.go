/*
Copyright 2019 The KubeCI Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kube-ci/engine/apis/engine/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkplanLister helps list Workplans.
type WorkplanLister interface {
	// List lists all Workplans in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Workplan, err error)
	// Workplans returns an object that can list and get Workplans.
	Workplans(namespace string) WorkplanNamespaceLister
	WorkplanListerExpansion
}

// workplanLister implements the WorkplanLister interface.
type workplanLister struct {
	indexer cache.Indexer
}

// NewWorkplanLister returns a new WorkplanLister.
func NewWorkplanLister(indexer cache.Indexer) WorkplanLister {
	return &workplanLister{indexer: indexer}
}

// List lists all Workplans in the indexer.
func (s *workplanLister) List(selector labels.Selector) (ret []*v1alpha1.Workplan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Workplan))
	})
	return ret, err
}

// Workplans returns an object that can list and get Workplans.
func (s *workplanLister) Workplans(namespace string) WorkplanNamespaceLister {
	return workplanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkplanNamespaceLister helps list and get Workplans.
type WorkplanNamespaceLister interface {
	// List lists all Workplans in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Workplan, err error)
	// Get retrieves the Workplan from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Workplan, error)
	WorkplanNamespaceListerExpansion
}

// workplanNamespaceLister implements the WorkplanNamespaceLister
// interface.
type workplanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Workplans in the indexer for a given namespace.
func (s workplanNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Workplan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Workplan))
	})
	return ret, err
}

// Get retrieves the Workplan from the indexer for a given namespace and name.
func (s workplanNamespaceLister) Get(name string) (*v1alpha1.Workplan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workplan"), name)
	}
	return obj.(*v1alpha1.Workplan), nil
}
