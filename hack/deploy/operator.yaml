apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: kubeci-engine
  namespace: ${KUBECI_ENGINE_NAMESPACE}
  labels:
    app: kubeci-engine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeci-engine
  template:
    metadata:
      labels:
        app: kubeci-engine
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      serviceAccountName: ${KUBECI_ENGINE_SERVICE_ACCOUNT}
      imagePullSecrets: [${KUBECI_ENGINE_IMAGE_PULL_SECRET}]
      containers:
      - name: operator
        image: ${KUBECI_ENGINE_DOCKER_REGISTRY}/kubeci-engine:${KUBECI_ENGINE_IMAGE_TAG}
        imagePullPolicy: ${KUBECI_ENGINE_IMAGE_PULL_POLICY}
        args:
        - run
        - --v=3
        - --rbac=${KUBECI_ENGINE_ENABLE_RBAC}
        - --docker-registry=${KUBECI_ENGINE_DOCKER_REGISTRY}
        - --secure-port=8443
        - --audit-log-path=-
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --enable-status-subresource=${KUBECI_ENGINE_ENABLE_STATUS_SUBRESOURCE}
        - --use-kubeapiserver-fqdn-for-aks=${KUBECI_ENGINE_USE_KUBEAPISERVER_FQDN_FOR_AKS}
        - --enable-analytics=${KUBECI_ENGINE_ENABLE_ANALYTICS}
        ports:
        - containerPort: 8443
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
        resources:
          requests:
            cpu: "100m"
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
      - name: web-ui
        image: ${KUBECI_ENGINE_DOCKER_REGISTRY}/kubeci-engine:${KUBECI_ENGINE_IMAGE_TAG}
        imagePullPolicy: ${KUBECI_ENGINE_IMAGE_PULL_POLICY}
        args:
        - workplan-viewer
        ports:
        - containerPort: 9090
        resources:
          requests:
            cpu: "100m"
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: kubeci-engine-apiserver-cert
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      priorityClassName: ${KUBECI_PRIORITY_CLASS}
---
# kube lacks the service serving cert signer, so provide a manual secret for it
apiVersion: v1
kind: Secret
metadata:
  name: kubeci-engine-apiserver-cert
  namespace: ${KUBECI_ENGINE_NAMESPACE}
  labels:
    app: kubeci-engine
type: kubernetes.io/tls
data:
  tls.crt: ${TLS_SERVING_CERT}
  tls.key: ${TLS_SERVING_KEY}
---
# to be able to expose TSB inside the cluster
apiVersion: v1
kind: Service
metadata:
  name: kubeci-engine
  namespace: ${KUBECI_ENGINE_NAMESPACE}
  labels:
    app: kubeci-engine
spec:
  ports:
  - name: admission
    port: 443
    targetPort: 8443
  selector:
    app: kubeci-engine

