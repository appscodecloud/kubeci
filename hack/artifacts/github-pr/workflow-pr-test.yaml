apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: workflow-rbac-sa
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: workflow-rbac-role
rules:
- apiGroups: ["git.kube.ci"]
  resources: ["pullrequests"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list", "watch", "create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: workflow-rbac-binding
  namespace: default
subjects:
- kind: ServiceAccount
  namespace: default
  name: workflow-rbac-sa
roleRef:
  kind: ClusterRole
  name: workflow-rbac-role
  apiGroup: rbac.authorization.k8s.io
---
# operator needs same permissions but for all namespaces
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: workflow-rbac-binding
subjects:
- kind: ServiceAccount
  namespace: kube-system
  name: kubeci
roleRef:
  kind: ClusterRole
  name: workflow-rbac-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: engine.kube.ci/v1alpha1
kind: Workflow
metadata:
  name: wf-pr-test
  namespace: default
spec:
  triggers:
  - apiVersion: git.kube.ci/v1alpha1
    kind: PullRequest
    resource: pullrequests
    namespace: default
    selector:
      matchLabels:
        repository: kubeci-gpig
        state: open
        ok-to-test:
    onCreateOrUpdate: true
    onDelete: false
    envFromPath:
      HEAD_SHA: '{$.spec.headSHA}'
      PR_NUMBER: '{$.spec.number}'
  serviceAccount: workflow-rbac-sa
  envFrom:
  - secretRef:
      name: github-credential
  steps:
  - name: step-clone
    image: alpine/git
    commands:
    - sh
    args:
    - -c
    - git clone https://github.com/diptadas/kubeci-gpig.git .; git checkout $HEAD_SHA
  - name: step-test
    image: golang:alpine
    commands:
    - sh
    args:
    - -c
    - cat test.sh | sh

# kubectl create secret generic github-credential --from-literal=TOKEN=...
